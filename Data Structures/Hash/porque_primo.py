print("=== POR QUE N√öMERO PRIMO NO DOUBLE HASHING ===\n")

def mostrar_ciclo(tamanho_tabela, step):
    print(f"Tabela tamanho {tamanho_tabela}, step = {step}")
    posicoes_visitadas = []
    posicao = 0
    
    while True:
        if posicao in posicoes_visitadas:
            print(f"Posi√ß√µes visitadas: {posicoes_visitadas}")
            print(f"Voltou para posi√ß√£o {posicao} - CICLO COMPLETO!")
            print(f"Total de posi√ß√µes √∫nicas visitadas: {len(posicoes_visitadas)}/{tamanho_tabela}")
            if len(posicoes_visitadas) == tamanho_tabela:
                print("‚úÖ VISITOU TODAS - BOM!")
            else:
                print("‚ùå N√ÉO VISITOU TODAS - PROBLEMA!")
            break
        
        posicoes_visitadas.append(posicao)
        posicao = (posicao + step) % tamanho_tabela
    print()

print("--- CASO RUIM: Tamanho 10 (n√£o primo), Step 4 ---")
mostrar_ciclo(10, 4)

print("--- CASO RUIM: Tamanho 10 (n√£o primo), Step 6 ---") 
mostrar_ciclo(10, 6)

print("--- CASO BOM: Tamanho 11 (primo), Step 4 ---")
mostrar_ciclo(11, 4)

print("--- CASO BOM: Tamanho 11 (primo), Step 7 ---")
mostrar_ciclo(11, 7)

print("üéØ REGRA DE OURO:")
print("Se o tamanho da tabela √© PRIMO, qualquer step de 1 at√© (tamanho-1)")
print("vai visitar TODAS as posi√ß√µes!")
print()
print("Por isso usamos:")
print("‚Ä¢ Tamanho da tabela: n√∫mero primo (ex: 11, 13, 17...)")
print("‚Ä¢ hash2(chave) = primo_menor - (chave % primo_menor)")
print("‚Ä¢ Isso garante que step nunca seja 0 e sempre visite tudo!")
